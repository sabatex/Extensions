@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;


@typeparam TKey 
@typeparam TEntity where TEntity : BaseReference<TKey>, new()

@inherits BaseGridPage<TEntity,TKey>

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Додати"
              Click="InsertRow"
              Disabled=@(ItemToInsertInGrid != null) />
<RadzenDataGrid 
    Data="@DataGridItems"
    TItem="TEntity"
    @ref="DataGrid"
    AllowFiltering="true"
    AllowColumnResize="true"
    AllowPaging="true"
    PageSize="10"
    AllowSorting="true"
    EditMode="DataGridEditMode.Single"
    SelectionMode="DataGridSelectionMode.Single"
    RowUpdate="OnUpdateRow"
    RowCreate="OnCreateRow"
    LoadData="LoadData"
    IsLoading="isLoading"
    Count="count"
    @bind-Value="DataGridSelectedItems">
    <Columns>
        <RadzenDataGridColumn TItem="TEntity" Property="Description" Title="Назва" Width="auto">
            <EditTemplate Context="client">
                <RadzenTextBox @bind-Value="client.Description" TValue="string" Style="Width:100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenColumnRowControls
            T="TEntity"
            OnCancelEdit="item=>DataGrid.CancelEditRow(resetItemToInsertInGrid(item))"
            OnEditRow="async (item)=>await DataGrid.EditRow(item)"
            OnDeleteRow="DeleteRow"
            OnSaveRow="async (item)=>await DataGrid.UpdateRow(resetItemToInsertInGrid(item))"
            Width="120px"/>

     </Columns>
</RadzenDataGrid>

@code {
    bool isLoading = false;
    int count;

    TEntity resetItemToInsertInGrid(TEntity item)
    {
        if (item == ItemToInsertInGrid)
        {
            ItemToInsertInGrid = null;
        }
        return item;
    }
    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;
        var result = await GRUDAdapter.Get<TEntity>(args);
        DataGridItems = result.Result;
        count = result.Count;
        isLoading = false;
        
    }

    protected override async Task OnInitializedAsync()
    {


        try
        {
            //DataGridItems = await Http.GetFromJsonAsync<TEntity[]>($"api/{typeof(TEntity).Name}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


}



