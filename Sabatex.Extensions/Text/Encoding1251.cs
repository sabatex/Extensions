using System;
using System.Collections.Generic;
using System.Text;

namespace Sabatex.Extensions.Text
{

    public class Encoding1251 : Encoding
    {
        short[] Windows1251LookupTable =
        { 0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F,
          0x0010, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0018, 0x0019, 0x001A, 0x001B, 0x001C, 0x001D, 0x001E, 0x001F,
          0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x002E, 0x002F,
          0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037, 0x0038, 0x0039, 0x003A, 0x003B, 0x003C, 0x003D, 0x003E, 0x003F,
          0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047, 0x0048, 0x0049, 0x004A, 0x004B, 0x004C, 0x004D, 0x004E, 0x004F,
          0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057, 0x0058, 0x0059, 0x005A, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F,
          0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F,
          0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077, 0x0078, 0x0079, 0x007A, 0x007B, 0x007C, 0x007D, 0x007E, 0x007F,
          0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021, 0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
          0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0x0098, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
          0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7, 0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
          0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7, 0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
          0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417, 0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
          0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427, 0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
          0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437, 0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
          0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F
      };

      Dictionary<char, byte> win1251Dict = new Dictionary<char, byte>
      {
            { '\u0402', 0x80 }, { '\u0403', 0x81 }, { '\u201A', 0x82 }, { '\u0453', 0x83 }, { '\u201E', 0x84 }, { '\u2026', 0x85 }, { '\u2020', 0x86 }, { '\u2021', 0x87 }, { '\u20AC', 0x88 }, { '\u2030', 0x89 }, { '\u0409', 0x8A }, { '\u2039', 0x8B }, { '\u040A', 0x8C }, { '\u040C', 0x8D }, { '\u040B', 0x8E }, { '\u040F', 0x8F },
            { '\u0452', 0x90 }, { '\u2018', 0x91 }, { '\u2019', 0x92 }, { '\u201C', 0x93 }, { '\u201D', 0x94 }, { '\u2022', 0x95 }, { '\u2013', 0x96 }, { '\u2014', 0x97 }, { '\uFFFF', 0x98 }, { '\u2122', 0x99 }, { '\u0459', 0x9A }, { '\u203A', 0x9B }, { '\u045A', 0x9C }, { '\u045C', 0x9D }, { '\u045B', 0x9E }, { '\u045F', 0x9F },
            { '\u00A0', 0xA0 }, { '\u040E', 0xA1 }, { '\u045E', 0xA2 }, { '\u0408', 0xA3 }, { '\u00A4', 0xA4 }, { '\u0490', 0xA5 }, { '\u00A6', 0xA6 }, { '\u00A7', 0xA7 }, { '\u0401', 0xA8 }, { '\u00A9', 0xA9 }, { '\u0404', 0xAA }, { '\u00AB', 0xAB }, { '\u00AC', 0xAC }, { '\u00AD', 0xAD }, { '\u00AE', 0xAE }, { '\u0407', 0xAF },
            { '\u00B0', 0xB0 }, { '\u00B1', 0xB1 }, { '\u0406', 0xB2 }, { '\u0456', 0xB3 }, { '\u0491', 0xB4 }, { '\u00B5', 0xB5 }, { '\u00B6', 0xB6 }, { '\u00B7', 0xB7 }, { '\u0451', 0xB8 }, { '\u2116', 0xB9 }, { '\u0454', 0xBA }, { '\u00BB', 0xBB }, { '\u0458', 0xBC }, { '\u0405', 0xBD }, { '\u0455', 0xBE }, { '\u0457', 0xBF },
            { '\u0410', 0xC0 }, { '\u0411', 0xC1 }, { '\u0412', 0xC2 }, { '\u0413', 0xC3 }, { '\u0414', 0xC4 }, { '\u0415', 0xC5 }, { '\u0416', 0xC6 }, { '\u0417', 0xC7 }, { '\u0418', 0xC8 }, { '\u0419', 0xC9 }, { '\u041A', 0xCA }, { '\u041B', 0xCB }, { '\u041C', 0xCC }, { '\u041D', 0xCD }, { '\u041E', 0xCE }, { '\u041F', 0xCF },
            { '\u0420', 0xD0 }, { '\u0421', 0xD1 }, { '\u0422', 0xD2 }, { '\u0423', 0xD3 }, { '\u0424', 0xD4 }, { '\u0425', 0xD5 }, { '\u0426', 0xD6 }, { '\u0427', 0xD7 }, { '\u0428', 0xD8 }, { '\u0429', 0xD9 }, { '\u042A', 0xDA }, { '\u042B', 0xDB }, { '\u042C', 0xDC }, { '\u042D', 0xDD }, { '\u042E', 0xDE }, { '\u042F', 0xDF },
            { '\u0430', 0xE0 }, { '\u0431', 0xE1 }, { '\u0432', 0xE2 }, { '\u0433', 0xE3 }, { '\u0434', 0xE4 }, { '\u0435', 0xE5 }, { '\u0436', 0xE6 }, { '\u0437', 0xE7 }, { '\u0438', 0xE8 }, { '\u0439', 0xE9 }, { '\u043A', 0xEA }, { '\u043B', 0xEB }, { '\u043C', 0xEC }, { '\u043D', 0xED }, { '\u043E', 0xEE }, { '\u043F', 0xEF },
            { '\u0440', 0xF0 }, { '\u0441', 0xF1 }, { '\u0442', 0xF2 }, { '\u0443', 0xF3 }, { '\u0444', 0xF4 }, { '\u0445', 0xF5 }, { '\u0446', 0xF6 }, { '\u0447', 0xF7 }, { '\u0448', 0xF8 }, { '\u0449', 0xF9 }, { '\u044A', 0xFA }, { '\u044B', 0xFB }, { '\u044C', 0xFC }, { '\u044D', 0xFD }, { '\u044E', 0xFE }, { '\u044F', 0xFF }
        };


        byte GetWin1251Byte(char c)
        {
            short s =(short)c;
            if (s <= 0x7f)
                return (byte)s;

            return win1251Dict[c];
        }

        public override int GetByteCount(char[] chars, int index, int count)
        {
            return count;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="chars"></param>
        /// <param name="charIndex"></param>
        /// <param name="charCount"></param>
        /// <param name="bytes"></param>
        /// <param name="byteIndex"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)
        {
            int originalByteIndex = byteIndex;
            for (int i = 0; i < charCount; i++)
            {
                    char c = chars[charIndex + i];
                    bytes[byteIndex++] = GetWin1251Byte(c);
            }
            return byteIndex - originalByteIndex;
        }

        public override int GetCharCount(byte[] bytes, int index, int count)
        {
            return count;
        }

        public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
        {
            for (int i = 0; i < byteCount; i++)
            {
                chars[charIndex + i] = (char)Windows1251LookupTable[(int)bytes[byteIndex + i]];
            }
            return byteCount;
        }

        public override int GetMaxByteCount(int charCount)
        {
            return charCount;
        }

        public override int GetMaxCharCount(int byteCount)
        {
            return byteCount;
        }
    }

}
